CREATE USER ACTIVIDAD_CLASE_DB IDENTIFIED BY 1;

GRANT CONNECT, RESOURCE TO ACTIVIDAD_CLASE_DB;
GRANT CREATE MATERIALIZED VIEW TO ACTIVIDAD_CLASE_DB;
GRANT EXECUTE ON DBMS_MVIEW TO ACTIVIDAD_CLASE_DB;

ALTER USER ACTIVIDAD_CLASE_DB DEFAULT TABLESPACE USERS;
ALTER USER ACTIVIDAD_CLASE_DB QUOTA UNLIMITED ON USERS;

/*CREACION TABLA USUARIOS*/
CREATE TABLE usuarios ( 
usuario_id NUMBER PRIMARY KEY, 
nombre VARCHAR2(100),
correo VARCHAR2(150)
);

/*CREACION TABLA INCIDENTES*/
CREATE TABLE incidentes ( 
incidente_id NUMBER PRIMARY KEY,
descripcion VARCHAR2(200), 
criticidad VARCHAR2(20)
);

/*CREACION TABLA TICKETS*/
CREATE TABLE tickets ( 
ticket_id NUMBER PRIMARY KEY,
usuario_id NUMBER,
incidente_id NUMBER,
fecha_apertura TIMESTAMP DEFAULT SYSTIMESTAMP,
estado VARCHAR2(20),
FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id),
FOREIGN KEY (incidente_id) REFERENCES incidentes(incidente_id)
);

/*CREACION SECUENCIA EN TICKETS PARA REALIZAR EL PROCEDIMIENTO 1*/
CREATE SEQUENCE TICKET_SEQ
START WITH 12
INCREMENT BY 1
NOCACHE;


/*CREACION TABLA CHAT IA*/
CREATE TABLE chat_ia ( 
chat_id NUMBER PRIMARY KEY,
ticket_id NUMBER,
mensaje VARCHAR2(300),
quien VARCHAR2(20),
fecha TIMESTAMP DEFAULT SYSTIMESTAMP,
FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)
);

/*CREACION DE SECUENCIA EN CHAT_IA PARA REALIZAR EL TRIGGER 1*/
CREATE SEQUENCE CHAT_IA_SEQ
START WITH 11
INCREMENT BY 1
NOCACHE;


/*CREACION TABLA SOLUCIONES*/
CREATE TABLE soluciones ( 
solucion_id NUMBER PRIMARY KEY,
ticket_id NUMBER,
solucion_texto VARCHAR2(300),
aplicada_por VARCHAR2(20),
fecha TIMESTAMP DEFAULT SYSTIMESTAMP,
FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)
);

/*CREACION DE SECUENCIA EN SOLUCIONES PARA REALIZAR EL PROCEDIMIENTO 3*/
CREATE SEQUENCE SOLUCION_SEQ
START WITH 12
INCREMENT BY 1
NOCACHE;
SELECT * FROM SOLUCIONES;


/*INSERTS PARA LA TABLA USUARIOS*/
INSERT INTO usuarios VALUES (1, 'Ana López', 'ana@correo.com');
INSERT INTO usuarios VALUES (2, 'Carlos Ruiz', 'carlos@correo.com');
INSERT INTO usuarios VALUES (3, 'Diana Gómez', 'diana@correo.com');
INSERT INTO usuarios VALUES (4, 'Fernando Pérez', 'fernando@correo.com');
INSERT INTO usuarios VALUES (5, 'Lucía Torres', 'lucia@correo.com');
INSERT INTO usuarios VALUES (6, 'Marcos Salas', 'marcos@correo.com');
INSERT INTO usuarios VALUES (7, 'Patricia Vega', 'patricia@correo.com');
INSERT INTO usuarios VALUES (8, 'Raúl Mendoza', 'raul@correo.com');
INSERT INTO usuarios VALUES (9, 'Silvia Castro', 'silvia@correo.com');
INSERT INTO usuarios VALUES (10, 'Tomás Fuentes', 'tomas@correo.com');


/*INSERTS PARA LA TBALA INCIDENTES*/
INSERT INTO incidentes VALUES (1, 'No enciende el equipo', 'Alta');
INSERT INTO incidentes VALUES (2, 'No hay internet', 'Media');
INSERT INTO incidentes VALUES (3, 'Pantalla azul', 'Alta');
INSERT INTO incidentes VALUES (4, 'No imprime', 'Baja');
INSERT INTO incidentes VALUES (5, 'Virus detectado', 'Alta');
INSERT INTO incidentes VALUES (6, 'Lentitud en sistema', 'Media');
INSERT INTO incidentes VALUES (7, 'Error al abrir app', 'Media');
INSERT INTO incidentes VALUES (8, 'Mouse no responde', 'Baja');
INSERT INTO incidentes VALUES (9, 'Teclado da doble letra', 'Baja');
INSERT INTO incidentes VALUES (10, 'Desbloqueo de cuenta', 'Media');


/*INSERTS PARA LA TABLA DE TICKETS*/
INSERT INTO tickets VALUES (1, 1, 1, SYSTIMESTAMP, 'Abierto');
INSERT INTO tickets VALUES (2, 2, 2, SYSTIMESTAMP, 'Cerrado');
INSERT INTO tickets VALUES (3, 3, 3, SYSTIMESTAMP, 'Abierto');
INSERT INTO tickets VALUES (4, 4, 4, SYSTIMESTAMP, 'Abierto');
INSERT INTO tickets VALUES (5, 5, 5, SYSTIMESTAMP, 'Cerrado');
INSERT INTO tickets VALUES (6, 6, 6, SYSTIMESTAMP, 'Abierto');
INSERT INTO tickets VALUES (7, 7, 7, SYSTIMESTAMP, 'Cerrado');
INSERT INTO tickets VALUES (8, 8, 8, SYSTIMESTAMP, 'Abierto');
INSERT INTO tickets VALUES (9, 9, 9, SYSTIMESTAMP, 'Cerrado');
INSERT INTO tickets VALUES (10, 10, 10, SYSTIMESTAMP, 'Abierto');


/*INSERTS PARA LA TABLA DE CHAT IA*/
INSERT INTO chat_ia VALUES (1, 1, 'Hola, ¿puedes describir el problema?', 'IA', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (2, 1, 'No enciende mi computadora', 'usuario', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (3, 2, '¿Tienes el router conectado?', 'IA', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (4, 2, 'Sí, pero no hay señal', 'usuario', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (5, 3, '¿Te sale algún código de error?', 'IA', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (6, 4, '¿Ya revisaste el papel en la impresora?', 'IA', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (7, 5, 'Se detectó un virus, actualizando antivirus.', 'IA', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (8, 6, '¿Qué aplicación va lenta?', 'IA', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (9, 7, 'Reinstala la app y reinicia.', 'IA', SYSTIMESTAMP);
INSERT INTO chat_ia VALUES (10, 8, 'Prueba otro puerto USB.', 'IA', SYSTIMESTAMP);


/*INSERTS PARA LA TABLA DE SOLUCIONES*/
INSERT INTO soluciones VALUES (1, 1, 'Se cambió la fuente de poder.', 'Técnico', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (2, 2, 'Se reinició el módem.', 'IA', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (3, 3, 'Actualización de drivers.', 'IA', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (4, 4, 'Colocación de nuevo cartucho.', 'Técnico', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (5, 5, 'Limpieza de archivos infectados.', 'IA', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (6, 6, 'Optimización del sistema.', 'IA', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (7, 7, 'Actualización del software.', 'Técnico', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (8, 8, 'Cambio de puerto USB.', 'IA', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (9, 9, 'Revisión del teclado.', 'Técnico', SYSTIMESTAMP);
INSERT INTO soluciones VALUES (10, 10, 'Reset de credenciales.', 'IA', SYSTIMESTAMP);

/*SELECTS PARA VERFICIAR QUE LOS INSERTS SE HAYAN HECHO DE MANERA CORRECTA*/
SELECT * FROM CHAT_IA;
SELECT * FROM USUARIOS;
SELECT * FROM SOLUCIONES;
SELECT * FROM TICKETS;
SELECT * FROM INCIDENTES;



/*CREACION DE VISTA TICKETS ABIERTOS
 * Crea una vista que muestre el nombre del usuario, la descripción del incidente y el estado del ticket, solo para tickets que están abiertos.*/
CREATE OR REPLACE VIEW TICKETS_ABIERTOS AS 
SELECT u.nombre AS Nombre, i.descripcion AS Descripcion, t.estado AS Estado
FROM usuarios u JOIN tickets t ON u.usuario_id = t.usuario_id JOIN incidentes i ON t.incidente_id = i.incidente_id
WHERE t.estado = 'Abierto';

/*SELECT PARA CONSULTAR LA INFORMACION DE LA VISTA NORMAL TICKETS_ABIERTOS*/
SELECT * FROM TICKETS_ABIERTOS;


/*CREACION VISTA HISTORIAL DE CHAT
 * Crea una vista que liste el historial del chat, mostrando el nombre del usuario, el mensaje, quién lo dijo y la fecha.*/
CREATE OR REPLACE VIEW VISTA_HISTORIAL AS
SELECT U.NOMBRE, C.MENSAJE, C.QUIEN AS QUIEN_LO_DIJO, C.FECHA
FROM USUARIOS U JOIN TICKETS T ON U.USUARIO_ID = T.USUARIO_ID JOIN CHAT_IA C ON T.TICKET_ID = C.TICKET_ID;

/*SELECT PARA CONSULTAR LA INFORMACION DE LA VISTA NORMAL VISTA_HISTORIAL*/
SELECT * FROM VISTA_HISTORIAL;


/*CREACION VISTA SOLUCIONES
 * Crea una vista que muestre las soluciones aplicadas por IA, con el ticket, la descripción del incidente y el texto de la solución.*/
CREATE OR REPLACE VIEW VISTA_SOLUCIONES AS
SELECT T.TICKET_ID AS TICKET, I.DESCRIPCION, S.SOLUCION_TEXTO 
FROM TICKETS T JOIN INCIDENTES I ON T.TICKET_ID = I.INCIDENTE_ID JOIN SOLUCIONES S ON S.SOLUCION_ID = T.TICKET_ID;

/*SELECT PARA CONSULTAR LA INFORMACION DE LA VISTA NORMAL VISTA_SOLUCIONES*/
SELECT * FROM VISTA_SOLUCIONES;


/*VISTA MATERIALIZADA 1
 * Crea una vista materializada que guarde los tickets cerrados con el nombre del usuario y criticidad del incidente.*/
CREATE MATERIALIZED VIEW TICKETS_CERRADOS 
REFRESH COMPLETE AS 
SELECT T.TICKET_ID AS TICKET, U.NOMBRE, I.CRITICIDAD
FROM TICKETS T
JOIN USUARIOS U ON T.USUARIO_ID = U.USUARIO_ID
JOIN INCIDENTES I ON I.INCIDENTE_ID = T.INCIDENTE_ID
WHERE T.ESTADO = 'Cerrado';

/*SELECT PARA VERIFICAR QUE LA INFORMACIÓN GUARDADA EN LA VISTA MATERIALIZADA SEA CORRECTA*/
SELECT * FROM TICKETS_CERRADOS;
SELECT * FROM TICKETS;

/*LAS VISTAS MATERIALIZADAS FUNCIONABAN AL MOMENTO DE CREARLAS, PERO MIENTRAS SE AVANZABA CON LAS ACTIVIDADES MARCABAN UNA X ROJA, 
POR LO QUE SE HIZO UN REFRESH DE LA VISTA Y AHORA YA NO MARCA NINGUNA X ROJA*/
BEGIN
   DBMS_MVIEW.REFRESH('TICKETS_CERRADOS', 'C');
END;


/*VISTA MATERIALIZADA 2
 * Crea una vista materializada que muestre todas las soluciones aplicadas por técnicos, con su fecha y ticket asociado.*/
CREATE MATERIALIZED VIEW SOLUCIONES_APLICADAS
BUILD IMMEDIATE
REFRESH ON DEMAND
AS
SELECT TICKET_ID, FECHA, APLICADA_POR
FROM SOLUCIONES
WHERE APLICADA_POR = 'Técnico';

/*SELECT PARA VERIFICAR QUE LA INFORMACION DE LA VISTA MATERIALIZADA SEA CORRECTA*/
SELECT * FROM SOLUCIONES_APLICADAS;
SELECT * FROM SOLUCIONES;
SELECT * FROM TICKETS;

/*LAS VISTAS MATERIALIZADAS FUNCIONABAN AL MOMENTO DE CREARLAS, PERO MIENTRAS SE AVANZABA CON LAS ACTIVIDADES MARCABAN UNA X ROJA, 
POR LO QUE SE HIZO UN REFRESH DE LA VISTA Y AHORA YA NO MARCA NINGUNA X ROJA*/
BEGIN
   DBMS_MVIEW.REFRESH('SOLUCIONES_APLICADAS', 'C');
END;


/*VISTA MATERIALIZADA 3
 * Crea una vista materializada que muestre el total de tickets abiertos y cerrados agrupado por criticidad del incidente.*/
CREATE MATERIALIZED VIEW TOTAL_DE_TICKETS
BUILD IMMEDIATE 
REFRESH ON DEMAND 
AS
SELECT I.CRITICIDAD,
COUNT(CASE WHEN T.ESTADO = 'Abierto' THEN 1 END) AS ESTADO_ABIERTO,
COUNT(CASE WHEN T.ESTADO = 'Cerrado' THEN 1 END) AS ESTADO_CERRADO 
FROM TICKETS T 
JOIN INCIDENTES I ON T.INCIDENTE_ID = I.INCIDENTE_ID 
GROUP BY I.CRITICIDAD;

/*SELECT PARA VER LA INFORMACION DENTRO DE LA VISTA MATERIALIZADA*/
SELECT * FROM TOTAL_DE_TICKETS;

SELECT * FROM TICKETS;
SELECT * FROM SOLUCIONES;
SELECT * FROM CHAT_IA;
SELECT * FROM INCIDENTES;

/*LAS VISTAS MATERIALIZADAS FUNCIONABAN AL MOMENTO DE CREARLAS, PERO MIENTRAS SE AVANZABA CON LAS ACTIVIDADES MARCABAN UNA X ROJA, 
POR LO QUE SE HIZO UN REFRESH DE LA VISTA Y AHORA YA NO MARCA NINGUNA X ROJA*/
BEGIN
   DBMS_MVIEW.REFRESH('TOTAL_DE_TICKETS', 'C');
END;


/*TRIGGER 1
 * Crea un trigger que al insertar una nueva solución, inserte automáticamente un mensaje en chat_ia diciendo “Solución aplicada: texto_solución”.*/
CREATE OR REPLACE TRIGGER TR_SOLUCION_INSERT
AFTER INSERT ON SOLUCIONES
FOR EACH ROW
BEGIN
  INSERT INTO CHAT_IA (
    CHAT_ID,
    TICKET_ID,
    MENSAJE,
    QUIEN,
    FECHA
  )
  VALUES (
    CHAT_IA_SEQ.NEXTVAL,
    :NEW.TICKET_ID,
    'SOLUCION APLICADA: ' || :NEW.solucion_texto,
    'IA',
    SYSTIMESTAMP
  );
END;
/

/*INSERT PARA CREAR LA NUEVA SOLUCION EN LA TABLA SOLUCIONES Y UN SELECT A LA TABLA CHAT_IA PARA VERIFICAR QUE SE CREO LA NUEVA FILA CON EL TEXTO INTRODUCIDO*/
INSERT INTO SOLUCIONES VALUES(11, 5, 'SE ACTUALIZO LA BIOS','TECNICO', SYSTIMESTAMP);
SELECT * FROM SOLUCIONES;
SELECT * FROM CHAT_IA;


/*TRIGGER 2
 * Crea un trigger que al cambiar el estado del ticket a “Cerrado”, inserte en chat_ia un mensaje automático diciendo “Ticket cerrado”.*/
CREATE OR REPLACE TRIGGER TRG_TICKET_CERRADO
AFTER UPDATE ON TICKETS
FOR EACH ROW
WHEN (NEW.ESTADO = 'Cerrado' AND OLD.ESTADO != 'Cerrado')
BEGIN
  INSERT INTO CHAT_IA (
    CHAT_ID,
    TICKET_ID,
    MENSAJE,
    QUIEN,
    FECHA
  ) VALUES (
    CHAT_IA_SEQ.NEXTVAL,
    :NEW.TICKET_ID,
    'TICKET CERRADO',
    'IA',
    SYSTIMESTAMP
  );
END;
/

/*UPDATE PARA MODIFICAR EL ESTADO DE UN TICKET A "Cerrado" Y UN SELECT PARA VERFICICAR QUE SE HIZO EL NUEVO INSERRT EN LA TABLA CHAT_IA*/
UPDATE TICKETS
SET ESTADO = 'Cerrado'
WHERE TICKET_ID = 3;

SELECT * FROM CHAT_IA WHERE TICKET_ID = 3;


/*TRIGGER 3
 * Crea un trigger que prohíba (usando RAISE_APPLICATION_ERROR) insertar tickets con estado diferente a “Abierto” o “Cerrado”.*/
CREATE OR REPLACE TRIGGER TRG_VALIDACION_TICKET
BEFORE INSERT ON TICKETS
FOR EACH ROW
BEGIN
  IF :NEW.estado NOT IN ('Abierto', 'Cerrado') THEN
    RAISE_APPLICATION_ERROR(-20001, 'El estado del ticket debe ser "Abierto" o "Cerrado".');
  END IF;
END;
/

SELECT * FROM TICKETS;

/*INSERT PARA VERIFICAR QUE NO DEJA INTRODUCIR UN TICKET CON ESTADO DIFERENTE A "Abierto" o "Cerrado"*/
INSERT INTO TICKETS VALUES (11, 1, 1, SYSTIMESTAMP, 'En espera');
INSERT INTO TICKETS VALUES (11, 1, 1, SYSTIMESTAMP, 'Abierto');



/*FUNCION 1
 * Crea una función que reciba un ticket_id y devuelva el estado actual del ticket.*/
CREATE OR REPLACE FUNCTION FUNCION_TICKET (P_TICKET_ID IN NUMBER) 
RETURN VARCHAR2 
IS
V_ESTADO VARCHAR2(15);
BEGIN 
	SELECT ESTADO INTO V_ESTADO
	FROM TICKETS
	WHERE TICKET_ID = P_TICKET_ID;
	RETURN V_ESTADO;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
	RETURN 'TICKET NO EXISTENTE';
END;
/

/*SELECT PARA VERIFICAR EL FUNCIONAMIENTO DE LA FUNCION 1*/
SELECT FUNCION_TICKET(12) FROM DUAL;
SELECT * FROM TICKETS;


/*FUNCION 2
 * Crea una función que reciba un usuario_id y devuelva el total de tickets que ha reportado ese usuario.*/
CREATE OR REPLACE FUNCTION TOTAL_TICKETS (P_USUARIO_ID IN NUMBER)
RETURN NUMBER IS
V_TOTAL_TICKETS NUMBER;
BEGIN
	SELECT COUNT(*) INTO V_TOTAL_TICKETS 
	FROM TICKETS
	WHERE USUARIO_ID = P_USUARIO_ID;
	RETURN V_TOTAL_TICKETS;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
	RETURN 'NO HAY TICKETS EXISTENTES';
END;
/

/*SELECT PARA VERIFICAR EL FUNCIONAMIENTO DE LA FUNCION 2*/
SELECT TOTAL_TICKETS(1) FROM DUAL;

SELECT * FROM TICKETS;
SELECT * FROM USUARIOS;


/*FUNCION 3
 * Crea una función que reciba un ticket_id y regrese un texto concatenado que diga: "Usuario: nombre - Incidente: descripción - Estado: estado"*/
CREATE OR REPLACE FUNCTION TEXTO_CONCATENADO (P_TICKET_ID IN NUMBER)
RETURN VARCHAR2 IS
V_TEXTO VARCHAR2(500);
BEGIN
	SELECT 'USUARIO: ' || U.NOMBRE || ' - INCIDENTE: ' || I.DESCRIPCION || ' - ESTADO: ' || T.ESTADO
	INTO V_TEXTO
	FROM TICKETS T 
	JOIN USUARIOS U ON T.USUARIO_ID = U.USUARIO_ID 
	JOIN INCIDENTES I ON T.INCIDENTE_ID = I.INCIDENTE_ID
	WHERE T.TICKET_ID = P_TICKET_ID;
	RETURN V_TEXTO;
EXCEPTION
	WHEN NO_DATA_FOUND THEN 
	RETURN 'SIN INFORMACION';
END;
/

/*SELECT PARA VERIFICAR EL FUNCIONAMIENTO DE LA FUNCION 3*/
SELECT TEXTO_CONCATENADO(2) FROM DUAL;
SELECT * FROM TICKETS;



/*PROCEDIMIENTO 1
 * Crea un procedimiento que reciba el usuario_id, incidente_id y estado, e inserte un nuevo ticket en la tabla tickets.*/
CREATE OR REPLACE PROCEDURE CREAR_NUEVO_TICKET (P_USUARIO_ID IN NUMBER, P_INCIDENTE_ID IN NUMBER, P_ESTADO IN VARCHAR2)
IS
BEGIN
	INSERT INTO TICKETS (
   	TICKET_ID,
    USUARIO_ID,
    INCIDENTE_ID,
    FECHA_APERTURA,
    ESTADO
  ) VALUES (
    TICKET_SEQ.NEXTVAL,
    P_USUARIO_ID,
    P_INCIDENTE_ID,
    SYSTIMESTAMP,
    P_ESTADO
  );
COMMIT;
END;
/

/*INSERT PARA EJECUTAR EL PROCEDIMIENTO 1*/
BEGIN
  CREAR_NUEVO_TICKET(3, 4, 'Abierto');
END;
/

SELECT * FROM TICKETS
WHERE USUARIO_ID = 3
ORDER BY TICKET_ID DESC;
SELECT * FROM INCIDENTES;


/*PROCEDIMIENTO 2
 * Crea un procedimiento que reciba un ticket_id y cambie su estado a “Cerrado”.*/
CREATE OR REPLACE PROCEDURE CAMBIAR_TICKET_CERRADO (P_TICKET_ID IN NUMBER)
IS
BEGIN
  UPDATE TICKETS
  SET ESTADO = 'Cerrado'
  WHERE ticket_id = P_TICKET_ID;

  DBMS_OUTPUT.PUT_LINE('Ticket ' || P_TICKET_ID || ' cerrado correctamente.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

SELECT * FROM TICKETS;
/*EJECUCION DEL PROCEDIMIENTO 2*/
BEGIN
  CAMBIAR_TICKET_CERRADO(1);
END;
/

/*PROCEDIMIENTO 3
 * Crea un procedimiento que inserte una nueva solución recibiendo: ticket_id, solucion_texto y aplicada_por.*/
CREATE OR REPLACE PROCEDURE INSERTAR_NUEVA_SOLUCION (P_TICKET_ID IN NUMBER, P_SOLUCION_TEXTO IN VARCHAR2, P_APLICADA_POR IN VARCHAR2)
IS
BEGIN
  INSERT INTO SOLUCIONES (
    SOLUCION_ID,
    TICKET_ID,
    SOLUCION_TEXTO,
    APLICADA_POR,
    FECHA
  ) VALUES (
    SOLUCION_SEQ.NEXTVAL,
    P_TICKET_ID,
    P_SOLUCION_TEXTO,
    P_APLICADA_POR,
    SYSTIMESTAMP
  );
END;
/
/*INSERT PARA EJECUTAR EL PROCEDIMIENTO 3*/
BEGIN
  INSERTAR_NUEVA_SOLUCION(3, 'Reinicio del sistema y actualización de drivers.', 'Técnico');
END;

SELECT * FROM SOLUCIONES;



/*INNER JOIN 1
 * Muestra el nombre del usuario y el estado del ticket, solo para los tickets que tienen usuario asignado.*/
SELECT U.NOMBRE AS NOMBRE_USUARIO, T.ESTADO AS ESTADO_TICKET FROM TICKETS T 
INNER JOIN USUARIOS U ON T.USUARIO_ID = U.USUARIO_ID;

SELECT * FROM USUARIOS;
SELECT * FROM TICKETS;

/*INNER JOIN 2
 * Muestra el ticket_id, la criticidad del incidente y el nombre del usuario de todos los tickets que tienen incidente y usuario registrado.*/
SELECT T.TICKET_ID, I.CRITICIDAD, U.NOMBRE AS NOMBRE_USUARIO FROM TICKETS T
INNER JOIN INCIDENTES I ON T.TICKET_ID = I.INCIDENTE_ID 
INNER JOIN USUARIOS U ON U.USUARIO_ID = T.TICKET_ID;

SELECT * FROM TICKETS;
SELECT * FROM INCIDENTES;
SELECT * FROM USUARIOS;

/*INNER JOIN 3
 * Muestra el mensaje del chat, quién lo dijo y la solución aplicada solo si existe una solución para ese ticket.*/
SELECT CH.MENSAJE, CH.QUIEN AS QUIEN_LO_DIJO, S.SOLUCION_TEXTO FROM CHAT_IA CH
INNER JOIN SOLUCIONES S ON CH.CHAT_ID = S.SOLUCION_ID;

SELECT * FROM CHAT_IA;
SELECT * FROM SOLUCIONES;



/*LEFT JOIN 1
 * Lista todos los usuarios con su estado del ticket, aunque no tengan tickets abiertos o cerrados.*/
SELECT U.NOMBRE, T.ESTADO FROM USUARIOS U 
LEFT JOIN TICKETS T ON U.USUARIO_ID = T.TICKET_ID;

SELECT * FROM USUARIOS;
SELECT * FROM TICKETS;

/*LEFT JOIN 2
 * Muestra la descripción del incidente junto con el estado del ticket, asegurándote que se muestren todos los incidentes, tengan o no ticket asociado.*/
SELECT I.DESCRIPCION AS DESCRIPCION_INCIDENTE, T.ESTADO AS ESTADO_TICKET FROM INCIDENTES I 
LEFT JOIN TICKETS T ON I.INCIDENTE_ID = T.TICKET_ID;

SELECT * FROM TICKETS;
SELECT * FROM INCIDENTES;

/*LEFT JOIN 3
 * Muestra todos los tickets con la posible solución aplicada, aunque algunos tickets aún no tengan solución.*/
SELECT T.TICKET_ID, S.SOLUCION_TEXTO AS SOLUCION_APLICADA FROM TICKETS T
LEFT JOIN SOLUCIONES S ON T.TICKET_ID = S.SOLUCION_ID;

SELECT * FROM TICKETS;
SELECT * FROM SOLUCIONES;



/*RIGHT JOIN 1
 * Muestra todos los tickets con el nombre del usuario, incluyendo aquellos tickets que pueden existir sin tener usuario asignado (simulado).*/
SELECT T.TICKET_ID, U.NOMBRE AS NOMBRE_USUARIO FROM TICKETS T
RIGHT JOIN USUARIOS U ON T.TICKET_ID = U.USUARIO_ID;

/*RIGHT JOIN 2
 * Lista todos los chats y muestra el mensaje junto con el estado del ticket, asegurando que aparezcan todos los chats, incluso si algún ticket estuviera eliminado.*/
SELECT T.TICKET_ID, C.MENSAJE, T.ESTADO FROM TICKETS T
RIGHT JOIN CHAT_IA C ON T.TICKET_ID = C.TICKET_ID;

/*RIGHT JOIN 3
 * Muestra las soluciones junto con el nombre del usuario, asegurando que aparezcan todas las soluciones, aunque el usuario no exista (caso teórico).*/
SELECT S.SOLUCION_TEXTO AS SOLUCION, U.NOMBRE AS NOMBRE_USUARIO FROM SOLUCIONES S
RIGHT JOIN USUARIOS U ON S.SOLUCION_ID = U.USUARIO_ID;

SELECT * FROM SOLUCIONES;
SELECT * FROM USUARIOS;


/*FULL OUTER JOIN 1
 * Muestra todos los usuarios y tickets, aunque no existan registros relacionados entre ellos.*/
SELECT U.USUARIO_ID, U.NOMBRE AS NOMBRE_USUARIO, T.TICKET_ID, T.ESTADO FROM USUARIOS U
FULL OUTER JOIN TICKETS T ON U.USUARIO_ID = T.USUARIO_ID;

SELECT U.USUARIO_ID, U.NOMBRE AS NOMBRE_USUARIO, T.TICKET_ID, T.ESTADO FROM USUARIOS U
FULL OUTER JOIN TICKETS T ON U.USUARIO_ID = T.TICKET_ID;

SELECT * FROM TICKETS;
SELECT * FROM USUARIOS;

/*FULL OUTER JOIN 2
 * Muestra todos los incidentes y tickets, para ver qué incidentes tienen tickets y cuáles no, o qué tickets están asociados a incidentes que podrían no existir.*/
SELECT I.INCIDENTE_ID, I.DESCRIPCION AS DESCRIPCION_INCIDENTE, I.CRITICIDAD, T.TICKET_ID, T.USUARIO_ID, T.FECHA_APERTURA, T.ESTADO FROM INCIDENTES I
FULL OUTER JOIN TICKETS T ON I.INCIDENTE_ID = T.INCIDENTE_ID;

SELECT I.INCIDENTE_ID, I.DESCRIPCION AS DESCRIPCION_INCIDENTE, I.CRITICIDAD, T.TICKET_ID, T.USUARIO_ID, T.FECHA_APERTURA, T.ESTADO FROM INCIDENTES I
FULL OUTER JOIN TICKETS T ON I.INCIDENTE_ID = T.TICKET_ID;

SELECT * FROM INCIDENTES;
SELECT * FROM TICKETS;

/*FULL OUTER JOIN 3
 * Muestra todas las soluciones y chats, aunque no tengan relación directa, para revisar integridad.*/
SELECT S.SOLUCION_ID, S.TICKET_ID, S.SOLUCION_TEXTO AS SOLUCION, S.APLICADA_POR, S.FECHA, C.CHAT_ID, C.TICKET_ID, C.MENSAJE, C.QUIEN AS QUIEN_LO_DIJO, C.FECHA
FROM SOLUCIONES S
FULL OUTER JOIN CHAT_IA C ON S.SOLUCION_ID = C.CHAT_ID;

SELECT S.SOLUCION_ID, S.TICKET_ID, S.SOLUCION_TEXTO AS SOLUCION, S.APLICADA_POR, S.FECHA, C.CHAT_ID, C.TICKET_ID, C.MENSAJE, C.QUIEN AS QUIEN_LO_DIJO, C.FECHA
FROM SOLUCIONES S
FULL OUTER JOIN CHAT_IA C ON S.TICKET_ID = C.TICKET_ID;

SELECT * FROM SOLUCIONES;
SELECT * FROM CHAT_IA;





